//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSubset.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSubsetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, IDENTIFIER=44, NUMBER=45, 
		STRING=46, DIGIT=47, WS=48, LINE_COMMENT=49, BLOCK_COMMENT=50;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_varDeclaration = 2, RULE_varDeclarator = 3, 
		RULE_typeSpecifier = 4, RULE_expr = 5, RULE_controlStructure = 6, RULE_ifStatement = 7, 
		RULE_whileStatement = 8, RULE_forStatement = 9, RULE_doWhileStatement = 10, 
		RULE_switchStatement = 11, RULE_caseBlock = 12, RULE_functionDeclaration = 13, 
		RULE_parameterList = 14, RULE_ioFunction = 15, RULE_pointerManipulation = 16, 
		RULE_structDeclaration = 17, RULE_unionDeclaration = 18, RULE_preprocessorDirective = 19;
	public static readonly string[] ruleNames = {
		"program", "statement", "varDeclaration", "varDeclarator", "typeSpecifier", 
		"expr", "controlStructure", "ifStatement", "whileStatement", "forStatement", 
		"doWhileStatement", "switchStatement", "caseBlock", "functionDeclaration", 
		"parameterList", "ioFunction", "pointerManipulation", "structDeclaration", 
		"unionDeclaration", "preprocessorDirective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'*'", "'='", "'['", "']'", "'int'", "'float'", "'char'", 
		"'void'", "'+'", "'-'", "'/'", "'%'", "'=='", "'!='", "'<'", "'>'", "'<='", 
		"'>='", "'&&'", "'||'", "'('", "')'", "'if'", "'{'", "'}'", "'else'", 
		"'while'", "'for'", "'do'", "'switch'", "'case'", "':'", "'break'", "'default'", 
		"'printf'", "'scanf'", "'&'", "'struct'", "'union'", "'#include'", "'#define'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "IDENTIFIER", "NUMBER", 
		"STRING", "DIGIT", "WS", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSubset.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSubsetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSubsetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSubsetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 40;
				statement();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureContext controlStructure() {
			return GetRuleContext<ControlStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoFunctionContext ioFunction() {
			return GetRuleContext<IoFunctionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				varDeclaration();
				State = 46;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				expr(0);
				State = 49;
				Match(T__0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				controlStructure();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 53;
				ioFunction();
				State = 54;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclaratorContext[] varDeclarator() {
			return GetRuleContexts<VarDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclaratorContext varDeclarator(int i) {
			return GetRuleContext<VarDeclaratorContext>(i);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			typeSpecifier();
			State = 59;
			varDeclarator();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 60;
				Match(T__1);
				State = 61;
				varDeclarator();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(CSubsetParser.DIGIT, 0); }
		public VarDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterVarDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitVarDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclaratorContext varDeclarator() {
		VarDeclaratorContext _localctx = new VarDeclaratorContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDeclarator);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 67;
					Match(T__2);
					}
				}

				State = 70;
				Match(IDENTIFIER);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 71;
					Match(T__3);
					State = 72;
					expr(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				Match(IDENTIFIER);
				State = 76;
				Match(T__4);
				State = 77;
				Match(DIGIT);
				State = 78;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CSubsetParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSubsetParser.STRING, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 84;
				Match(T__22);
				State = 85;
				expr(0);
				State = 86;
				Match(T__23);
				}
				break;
			case 2:
				{
				State = 88;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 89;
				Match(IDENTIFIER);
				State = 90;
				Match(T__4);
				State = 91;
				expr(0);
				State = 92;
				Match(T__5);
				}
				break;
			case 4:
				{
				State = 94;
				Match(NUMBER);
				}
				break;
			case 5:
				{
				State = 95;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 98;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 99;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30728L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 100;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 102;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2064384L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 103;
						expr(8);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 105;
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 106;
						expr(7);
						}
						break;
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ControlStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ControlStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterControlStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitControlStructure(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureContext controlStructure() {
		ControlStructureContext _localctx = new ControlStructureContext(Context, State);
		EnterRule(_localctx, 12, RULE_controlStructure);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				ifStatement();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				whileStatement();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114;
				forStatement();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				doWhileStatement();
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 5);
				{
				State = 116;
				switchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__24);
			State = 120;
			Match(T__22);
			State = 121;
			expr(0);
			State = 122;
			Match(T__23);
			State = 123;
			Match(T__25);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 124;
				statement();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
			State = 129;
			Match(T__26);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 130;
				Match(T__27);
				State = 131;
				Match(T__25);
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 132;
					statement();
					}
					}
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
				State = 137;
				Match(T__26);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__28);
			State = 142;
			Match(T__22);
			State = 143;
			expr(0);
			State = 144;
			Match(T__23);
			State = 145;
			Match(T__25);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 146;
				statement();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
			State = 151;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__29);
			State = 154;
			Match(T__22);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				State = 155;
				varDeclaration();
				}
			}

			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145310699520L) != 0)) {
				{
				State = 158;
				expr(0);
				}
			}

			State = 161;
			Match(T__0);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145310699520L) != 0)) {
				{
				State = 162;
				expr(0);
				}
			}

			State = 165;
			Match(T__23);
			State = 166;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_doWhileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__30);
			State = 169;
			Match(T__25);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 170;
				statement();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
			State = 175;
			Match(T__26);
			State = 176;
			Match(T__28);
			State = 177;
			Match(T__22);
			State = 178;
			expr(0);
			State = 179;
			Match(T__23);
			State = 180;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__31);
			State = 183;
			Match(T__22);
			State = 184;
			Match(IDENTIFIER);
			State = 185;
			Match(T__23);
			State = 186;
			Match(T__25);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 187;
				caseBlock();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__32 || _la==T__35 );
			State = 192;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CSubsetParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_caseBlock);
		int _la;
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				Match(T__32);
				State = 195;
				Match(NUMBER);
				State = 196;
				Match(T__33);
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 197;
					statement();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
				State = 202;
				Match(T__34);
				State = 203;
				Match(T__0);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				Match(T__35);
				State = 206;
				Match(T__33);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 207;
					statement();
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
				State = 212;
				Match(T__34);
				State = 213;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			typeSpecifier();
			State = 218;
			Match(IDENTIFIER);
			State = 219;
			Match(T__22);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				State = 220;
				parameterList();
				}
			}

			State = 223;
			Match(T__23);
			State = 224;
			Match(T__25);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 225;
				statement();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123565714179968L) != 0) );
			State = 230;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSubsetParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSubsetParser.IDENTIFIER, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			typeSpecifier();
			State = 233;
			Match(IDENTIFIER);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 234;
				Match(T__1);
				State = 235;
				typeSpecifier();
				State = 236;
				Match(IDENTIFIER);
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSubsetParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSubsetParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSubsetParser.IDENTIFIER, i);
		}
		public IoFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterIoFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitIoFunction(this);
		}
	}

	[RuleVersion(0)]
	public IoFunctionContext ioFunction() {
		IoFunctionContext _localctx = new IoFunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_ioFunction);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__36:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(T__36);
				State = 244;
				Match(T__22);
				State = 245;
				Match(STRING);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 246;
					Match(T__1);
					State = 247;
					Match(IDENTIFIER);
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 253;
				Match(T__23);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				Match(T__37);
				State = 255;
				Match(T__22);
				State = 256;
				Match(STRING);
				State = 257;
				Match(T__1);
				State = 258;
				Match(T__38);
				State = 259;
				Match(IDENTIFIER);
				State = 260;
				Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerManipulationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSubsetParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSubsetParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PointerManipulationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerManipulation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterPointerManipulation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitPointerManipulation(this);
		}
	}

	[RuleVersion(0)]
	public PointerManipulationContext pointerManipulation() {
		PointerManipulationContext _localctx = new PointerManipulationContext(Context, State);
		EnterRule(_localctx, 32, RULE_pointerManipulation);
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				Match(T__2);
				State = 264;
				Match(IDENTIFIER);
				State = 265;
				Match(T__3);
				State = 266;
				expr(0);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				Match(IDENTIFIER);
				State = 268;
				Match(T__3);
				State = 269;
				Match(T__38);
				State = 270;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(T__39);
			State = 274;
			Match(IDENTIFIER);
			State = 275;
			Match(T__25);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				{
				State = 276;
				varDeclaration();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			Match(T__26);
			State = 283;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		public UnionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterUnionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitUnionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclarationContext unionDeclaration() {
		UnionDeclarationContext _localctx = new UnionDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_unionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__40);
			State = 286;
			Match(IDENTIFIER);
			State = 287;
			Match(T__25);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				{
				State = 288;
				varDeclaration();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			Match(T__26);
			State = 295;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSubsetParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitPreprocessorDirective(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
		EnterRule(_localctx, 38, RULE_preprocessorDirective);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__41:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				Match(T__41);
				State = 298;
				Match(T__16);
				State = 299;
				Match(IDENTIFIER);
				State = 300;
				Match(T__17);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				Match(T__42);
				State = 302;
				Match(IDENTIFIER);
				State = 303;
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,50,307,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,4,0,42,8,0,11,0,
		12,0,43,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,57,8,1,1,2,1,2,
		1,2,1,2,5,2,63,8,2,10,2,12,2,66,9,2,1,3,3,3,69,8,3,1,3,1,3,1,3,3,3,74,
		8,3,1,3,1,3,1,3,1,3,3,3,80,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,3,5,97,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,
		108,8,5,10,5,12,5,111,9,5,1,6,1,6,1,6,1,6,1,6,3,6,118,8,6,1,7,1,7,1,7,
		1,7,1,7,1,7,4,7,126,8,7,11,7,12,7,127,1,7,1,7,1,7,1,7,4,7,134,8,7,11,7,
		12,7,135,1,7,1,7,3,7,140,8,7,1,8,1,8,1,8,1,8,1,8,1,8,4,8,148,8,8,11,8,
		12,8,149,1,8,1,8,1,9,1,9,1,9,3,9,157,8,9,1,9,3,9,160,8,9,1,9,1,9,3,9,164,
		8,9,1,9,1,9,1,9,1,10,1,10,1,10,4,10,172,8,10,11,10,12,10,173,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,4,11,189,8,11,11,
		11,12,11,190,1,11,1,11,1,12,1,12,1,12,1,12,4,12,199,8,12,11,12,12,12,200,
		1,12,1,12,1,12,1,12,1,12,1,12,4,12,209,8,12,11,12,12,12,210,1,12,1,12,
		1,12,3,12,216,8,12,1,13,1,13,1,13,1,13,3,13,222,8,13,1,13,1,13,1,13,4,
		13,227,8,13,11,13,12,13,228,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,5,
		14,239,8,14,10,14,12,14,242,9,14,1,15,1,15,1,15,1,15,1,15,5,15,249,8,15,
		10,15,12,15,252,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,262,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,272,8,16,1,17,1,17,1,
		17,1,17,5,17,278,8,17,10,17,12,17,281,9,17,1,17,1,17,1,17,1,18,1,18,1,
		18,1,18,5,18,290,8,18,10,18,12,18,293,9,18,1,18,1,18,1,18,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,3,19,305,8,19,1,19,0,1,10,20,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,0,4,1,0,7,10,2,0,3,3,11,14,1,0,15,
		20,1,0,21,22,327,0,41,1,0,0,0,2,56,1,0,0,0,4,58,1,0,0,0,6,79,1,0,0,0,8,
		81,1,0,0,0,10,96,1,0,0,0,12,117,1,0,0,0,14,119,1,0,0,0,16,141,1,0,0,0,
		18,153,1,0,0,0,20,168,1,0,0,0,22,182,1,0,0,0,24,215,1,0,0,0,26,217,1,0,
		0,0,28,232,1,0,0,0,30,261,1,0,0,0,32,271,1,0,0,0,34,273,1,0,0,0,36,285,
		1,0,0,0,38,304,1,0,0,0,40,42,3,2,1,0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,
		1,0,0,0,43,44,1,0,0,0,44,1,1,0,0,0,45,46,3,4,2,0,46,47,5,1,0,0,47,57,1,
		0,0,0,48,49,3,10,5,0,49,50,5,1,0,0,50,57,1,0,0,0,51,57,3,26,13,0,52,57,
		3,12,6,0,53,54,3,30,15,0,54,55,5,1,0,0,55,57,1,0,0,0,56,45,1,0,0,0,56,
		48,1,0,0,0,56,51,1,0,0,0,56,52,1,0,0,0,56,53,1,0,0,0,57,3,1,0,0,0,58,59,
		3,8,4,0,59,64,3,6,3,0,60,61,5,2,0,0,61,63,3,6,3,0,62,60,1,0,0,0,63,66,
		1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,5,1,0,0,0,66,64,1,0,0,0,67,69,5,
		3,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,73,5,44,0,0,71,72,5,
		4,0,0,72,74,3,10,5,0,73,71,1,0,0,0,73,74,1,0,0,0,74,80,1,0,0,0,75,76,5,
		44,0,0,76,77,5,5,0,0,77,78,5,47,0,0,78,80,5,6,0,0,79,68,1,0,0,0,79,75,
		1,0,0,0,80,7,1,0,0,0,81,82,7,0,0,0,82,9,1,0,0,0,83,84,6,5,-1,0,84,85,5,
		23,0,0,85,86,3,10,5,0,86,87,5,24,0,0,87,97,1,0,0,0,88,97,5,44,0,0,89,90,
		5,44,0,0,90,91,5,5,0,0,91,92,3,10,5,0,92,93,5,6,0,0,93,97,1,0,0,0,94,97,
		5,45,0,0,95,97,5,46,0,0,96,83,1,0,0,0,96,88,1,0,0,0,96,89,1,0,0,0,96,94,
		1,0,0,0,96,95,1,0,0,0,97,109,1,0,0,0,98,99,10,8,0,0,99,100,7,1,0,0,100,
		108,3,10,5,9,101,102,10,7,0,0,102,103,7,2,0,0,103,108,3,10,5,8,104,105,
		10,6,0,0,105,106,7,3,0,0,106,108,3,10,5,7,107,98,1,0,0,0,107,101,1,0,0,
		0,107,104,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,
		11,1,0,0,0,111,109,1,0,0,0,112,118,3,14,7,0,113,118,3,16,8,0,114,118,3,
		18,9,0,115,118,3,20,10,0,116,118,3,22,11,0,117,112,1,0,0,0,117,113,1,0,
		0,0,117,114,1,0,0,0,117,115,1,0,0,0,117,116,1,0,0,0,118,13,1,0,0,0,119,
		120,5,25,0,0,120,121,5,23,0,0,121,122,3,10,5,0,122,123,5,24,0,0,123,125,
		5,26,0,0,124,126,3,2,1,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,
		0,127,128,1,0,0,0,128,129,1,0,0,0,129,139,5,27,0,0,130,131,5,28,0,0,131,
		133,5,26,0,0,132,134,3,2,1,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,
		0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,5,27,0,0,138,140,1,0,0,0,
		139,130,1,0,0,0,139,140,1,0,0,0,140,15,1,0,0,0,141,142,5,29,0,0,142,143,
		5,23,0,0,143,144,3,10,5,0,144,145,5,24,0,0,145,147,5,26,0,0,146,148,3,
		2,1,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,
		150,151,1,0,0,0,151,152,5,27,0,0,152,17,1,0,0,0,153,154,5,30,0,0,154,156,
		5,23,0,0,155,157,3,4,2,0,156,155,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,
		0,158,160,3,10,5,0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,
		163,5,1,0,0,162,164,3,10,5,0,163,162,1,0,0,0,163,164,1,0,0,0,164,165,1,
		0,0,0,165,166,5,24,0,0,166,167,3,2,1,0,167,19,1,0,0,0,168,169,5,31,0,0,
		169,171,5,26,0,0,170,172,3,2,1,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,
		1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,27,0,0,176,177,5,29,
		0,0,177,178,5,23,0,0,178,179,3,10,5,0,179,180,5,24,0,0,180,181,5,1,0,0,
		181,21,1,0,0,0,182,183,5,32,0,0,183,184,5,23,0,0,184,185,5,44,0,0,185,
		186,5,24,0,0,186,188,5,26,0,0,187,189,3,24,12,0,188,187,1,0,0,0,189,190,
		1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,27,0,
		0,193,23,1,0,0,0,194,195,5,33,0,0,195,196,5,45,0,0,196,198,5,34,0,0,197,
		199,3,2,1,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,
		0,0,0,201,202,1,0,0,0,202,203,5,35,0,0,203,204,5,1,0,0,204,216,1,0,0,0,
		205,206,5,36,0,0,206,208,5,34,0,0,207,209,3,2,1,0,208,207,1,0,0,0,209,
		210,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,5,
		35,0,0,213,214,5,1,0,0,214,216,1,0,0,0,215,194,1,0,0,0,215,205,1,0,0,0,
		216,25,1,0,0,0,217,218,3,8,4,0,218,219,5,44,0,0,219,221,5,23,0,0,220,222,
		3,28,14,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,24,
		0,0,224,226,5,26,0,0,225,227,3,2,1,0,226,225,1,0,0,0,227,228,1,0,0,0,228,
		226,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,5,27,0,0,231,27,1,
		0,0,0,232,233,3,8,4,0,233,240,5,44,0,0,234,235,5,2,0,0,235,236,3,8,4,0,
		236,237,5,44,0,0,237,239,1,0,0,0,238,234,1,0,0,0,239,242,1,0,0,0,240,238,
		1,0,0,0,240,241,1,0,0,0,241,29,1,0,0,0,242,240,1,0,0,0,243,244,5,37,0,
		0,244,245,5,23,0,0,245,250,5,46,0,0,246,247,5,2,0,0,247,249,5,44,0,0,248,
		246,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,
		0,0,0,252,250,1,0,0,0,253,262,5,24,0,0,254,255,5,38,0,0,255,256,5,23,0,
		0,256,257,5,46,0,0,257,258,5,2,0,0,258,259,5,39,0,0,259,260,5,44,0,0,260,
		262,5,24,0,0,261,243,1,0,0,0,261,254,1,0,0,0,262,31,1,0,0,0,263,264,5,
		3,0,0,264,265,5,44,0,0,265,266,5,4,0,0,266,272,3,10,5,0,267,268,5,44,0,
		0,268,269,5,4,0,0,269,270,5,39,0,0,270,272,5,44,0,0,271,263,1,0,0,0,271,
		267,1,0,0,0,272,33,1,0,0,0,273,274,5,40,0,0,274,275,5,44,0,0,275,279,5,
		26,0,0,276,278,3,4,2,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,
		279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,5,27,0,0,283,284,
		5,1,0,0,284,35,1,0,0,0,285,286,5,41,0,0,286,287,5,44,0,0,287,291,5,26,
		0,0,288,290,3,4,2,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,
		292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,5,27,0,0,295,296,5,
		1,0,0,296,37,1,0,0,0,297,298,5,42,0,0,298,299,5,17,0,0,299,300,5,44,0,
		0,300,305,5,18,0,0,301,302,5,43,0,0,302,303,5,44,0,0,303,305,3,10,5,0,
		304,297,1,0,0,0,304,301,1,0,0,0,305,39,1,0,0,0,31,43,56,64,68,73,79,96,
		107,109,117,127,135,139,149,156,159,163,173,190,200,210,215,221,228,240,
		250,261,271,279,291,304
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
