//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ExprC.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ExprCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, CONSTANT=57, INT=58, FLOAT=59, 
		CHAR=60, IDENTIFIER=61, STRING_LITERAL=62, HEADER_FILE=63, WS=64, COMMENT=65, 
		LINE_COMMENT=66;
	public const int
		RULE_program = 0, RULE_preprocessorDirective = 1, RULE_defineDirective = 2, 
		RULE_mainFunction = 3, RULE_declaration = 4, RULE_functionDeclaration = 5, 
		RULE_parameterList = 6, RULE_parameter = 7, RULE_variableDeclaration = 8, 
		RULE_variableDeclarator = 9, RULE_structDeclaration = 10, RULE_structMember = 11, 
		RULE_unionDeclaration = 12, RULE_unionMember = 13, RULE_block = 14, RULE_statement = 15, 
		RULE_expressionStatement = 16, RULE_printfStatement = 17, RULE_scanfStatement = 18, 
		RULE_blockStatement = 19, RULE_ifStatement = 20, RULE_switchStatement = 21, 
		RULE_caseStatement = 22, RULE_defaultStatement = 23, RULE_forStatement = 24, 
		RULE_whileStatement = 25, RULE_doWhileStatement = 26, RULE_chamadaStatement = 27, 
		RULE_returnStatement = 28, RULE_pointerDeclaration = 29, RULE_ternaryExpression = 30, 
		RULE_arrayDeclaration = 31, RULE_matrixDeclaration = 32, RULE_arrayInitializer = 33, 
		RULE_type = 34, RULE_expression = 35, RULE_assignmentExpression = 36, 
		RULE_logicalOrExpression = 37, RULE_logicalAndExpression = 38, RULE_equalityExpression = 39, 
		RULE_relationalExpression = 40, RULE_additiveExpression = 41, RULE_multiplicativeExpression = 42, 
		RULE_unaryExpression = 43, RULE_primaryExpression = 44;
	public static readonly string[] ruleNames = {
		"program", "preprocessorDirective", "defineDirective", "mainFunction", 
		"declaration", "functionDeclaration", "parameterList", "parameter", "variableDeclaration", 
		"variableDeclarator", "structDeclaration", "structMember", "unionDeclaration", 
		"unionMember", "block", "statement", "expressionStatement", "printfStatement", 
		"scanfStatement", "blockStatement", "ifStatement", "switchStatement", 
		"caseStatement", "defaultStatement", "forStatement", "whileStatement", 
		"doWhileStatement", "chamadaStatement", "returnStatement", "pointerDeclaration", 
		"ternaryExpression", "arrayDeclaration", "matrixDeclaration", "arrayInitializer", 
		"type", "expression", "assignmentExpression", "logicalOrExpression", "logicalAndExpression", 
		"equalityExpression", "relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'include'", "'<'", "'>'", "'define'", "'int'", "'main'", 
		"'('", "')'", "','", "';'", "'['", "']'", "'='", "'*'", "'struct'", "'{'", 
		"'}'", "'union'", "'printf'", "'scanf'", "'&'", "'if'", "'else'", "'switch'", 
		"'case'", "':'", "'break'", "'default'", "'for'", "'while'", "'do'", "'return'", 
		"'?'", "'float'", "'void'", "'char'", "'double'", "'short'", "'long'", 
		"'unsigned'", "'||'", "'&&'", "'=='", "'!='", "'<='", "'>='", "'+'", "'-'", 
		"'/'", "'%'", "'!'", "'++'", "'--'", "'.'", "'sizeof'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "CONSTANT", "INT", 
		"FLOAT", "CHAR", "IDENTIFIER", "STRING_LITERAL", "HEADER_FILE", "WS", 
		"COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExprCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExprCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDirectiveContext[] preprocessorDirective() {
			return GetRuleContexts<PreprocessorDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDirectiveContext preprocessorDirective(int i) {
			return GetRuleContext<PreprocessorDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 90;
					preprocessorDirective();
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 100;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 98;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 96;
						declaration();
						}
						break;
					case 2:
						{
						State = 97;
						functionDeclaration();
						}
						break;
					}
					} 
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 103;
			mainFunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_FILE() { return GetToken(ExprCParser.HEADER_FILE, 0); }
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_preprocessorDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__0);
			State = 106;
			Match(T__1);
			State = 107;
			Match(T__2);
			State = 108;
			Match(HEADER_FILE);
			State = 109;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExprCParser.CONSTANT, 0); }
		public DefineDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterDefineDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitDefineDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineDirectiveContext defineDirective() {
		DefineDirectiveContext _localctx = new DefineDirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_defineDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__0);
			State = 112;
			Match(T__4);
			State = 113;
			Match(IDENTIFIER);
			State = 114;
			Match(CONSTANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_mainFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__5);
			State = 117;
			Match(T__6);
			State = 118;
			Match(T__7);
			State = 119;
			Match(T__8);
			State = 120;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionDeclarationContext unionDeclaration() {
			return GetRuleContext<UnionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineDirectiveContext defineDirective() {
			return GetRuleContext<DefineDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				structDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				unionDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 126;
				defineDirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 127;
				returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			type();
			State = 131;
			Match(IDENTIFIER);
			State = 132;
			Match(T__7);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4363686838336L) != 0)) {
				{
				State = 133;
				parameterList();
				}
			}

			State = 136;
			Match(T__8);
			State = 137;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			parameter();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 140;
				Match(T__9);
				State = 141;
				parameter();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			type();
			State = 148;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			type();
			State = 151;
			variableDeclarator();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 152;
				Match(T__9);
				State = 153;
				variableDeclarator();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTANT() { return GetTokens(ExprCParser.CONSTANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT(int i) {
			return GetToken(ExprCParser.CONSTANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclarator);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(IDENTIFIER);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 162;
					Match(T__11);
					State = 163;
					Match(CONSTANT);
					State = 164;
					Match(T__12);
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 170;
					Match(T__13);
					State = 171;
					expression();
					}
				}

				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				Match(T__14);
				State = 175;
				Match(IDENTIFIER);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 176;
					Match(T__11);
					State = 177;
					Match(CONSTANT);
					State = 178;
					Match(T__12);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 184;
					Match(T__13);
					State = 185;
					expression();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(T__15);
			State = 191;
			Match(IDENTIFIER);
			State = 192;
			Match(T__16);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4363686838336L) != 0)) {
				{
				{
				State = 193;
				structMember();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 199;
			Match(T__17);
			State = 200;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExprCParser.CONSTANT, 0); }
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 22, RULE_structMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			type();
			State = 203;
			Match(IDENTIFIER);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 204;
				Match(T__11);
				State = 205;
				Match(CONSTANT);
				State = 206;
				Match(T__12);
				}
			}

			State = 209;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnionMemberContext[] unionMember() {
			return GetRuleContexts<UnionMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionMemberContext unionMember(int i) {
			return GetRuleContext<UnionMemberContext>(i);
		}
		public UnionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterUnionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitUnionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclarationContext unionDeclaration() {
		UnionDeclarationContext _localctx = new UnionDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_unionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__18);
			State = 212;
			Match(IDENTIFIER);
			State = 213;
			Match(T__16);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4363686838336L) != 0)) {
				{
				{
				State = 214;
				unionMember();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(T__17);
			State = 221;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExprCParser.CONSTANT, 0); }
		public UnionMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterUnionMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitUnionMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionMemberContext unionMember() {
		UnionMemberContext _localctx = new UnionMemberContext(Context, State);
		EnterRule(_localctx, 26, RULE_unionMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			type();
			State = 224;
			Match(IDENTIFIER);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 225;
				Match(T__11);
				State = 226;
				Match(CONSTANT);
				State = 227;
				Match(T__12);
				}
			}

			State = 230;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(T__16);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166075811919003968L) != 0)) {
				{
				{
				State = 233;
				statement();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 239;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScanfStatementContext scanfStatement() {
			return GetRuleContext<ScanfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintfStatementContext printfStatement() {
			return GetRuleContext<PrintfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChamadaStatementContext chamadaStatement() {
			return GetRuleContext<ChamadaStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclarationContext pointerDeclaration() {
			return GetRuleContext<PointerDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TernaryExpressionContext ternaryExpression() {
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatrixDeclarationContext matrixDeclaration() {
			return GetRuleContext<MatrixDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				expressionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				blockStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 244;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 245;
				variableDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 246;
				forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 247;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 248;
				doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 249;
				switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 250;
				scanfStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 251;
				printfStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 252;
				chamadaStatement();
				State = 253;
				Match(T__10);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 255;
				returnStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 256;
				pointerDeclaration();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 257;
				ternaryExpression();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 258;
				arrayDeclaration();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 259;
				matrixDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			expression();
			State = 263;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ExprCParser.STRING_LITERAL, 0); }
		public PrintfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterPrintfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitPrintfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintfStatementContext printfStatement() {
		PrintfStatementContext _localctx = new PrintfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_printfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(T__19);
			State = 266;
			Match(T__7);
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 267;
				expression();
				}
				break;
			case 2:
				{
				State = 268;
				Match(STRING_LITERAL);
				}
				break;
			}
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 271;
				Match(T__9);
				State = 272;
				expression();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 278;
			Match(T__8);
			State = 279;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScanfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ExprCParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ExprCParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ExprCParser.IDENTIFIER, i);
		}
		public ScanfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scanfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterScanfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitScanfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScanfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScanfStatementContext scanfStatement() {
		ScanfStatementContext _localctx = new ScanfStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_scanfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(T__20);
			State = 282;
			Match(T__7);
			State = 283;
			Match(STRING_LITERAL);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 284;
				Match(T__9);
				{
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__21) {
					{
					State = 285;
					Match(T__21);
					}
				}

				State = 288;
				Match(IDENTIFIER);
				}
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			Match(T__8);
			State = 295;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(T__16);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166075811919003968L) != 0)) {
				{
				{
				State = 298;
				statement();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(T__22);
			State = 307;
			Match(T__7);
			State = 308;
			expression();
			State = 309;
			Match(T__8);
			State = 310;
			statement();
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 311;
				Match(T__23);
				State = 312;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement() {
			return GetRuleContext<DefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(T__24);
			State = 316;
			Match(T__7);
			State = 317;
			expression();
			State = 318;
			Match(T__8);
			State = 319;
			Match(T__16);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 320;
				caseStatement();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 326;
				defaultStatement();
				}
			}

			State = 329;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExprCParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(T__25);
			State = 332;
			Match(CONSTANT);
			State = 333;
			Match(T__26);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166075811919003968L) != 0)) {
				{
				{
				State = 334;
				statement();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 340;
			Match(T__27);
			State = 341;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_defaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(T__28);
			State = 344;
			Match(T__26);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166075811919003968L) != 0)) {
				{
				{
				State = 345;
				statement();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(T__29);
			State = 352;
			Match(T__7);
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__15:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
				{
				State = 353;
				variableDeclaration();
				}
				break;
			case T__7:
			case T__14:
			case T__21:
			case T__47:
			case T__48:
			case T__51:
			case T__52:
			case T__53:
			case T__55:
			case CONSTANT:
			case IDENTIFIER:
			case STRING_LITERAL:
				{
				State = 354;
				expression();
				}
				break;
			case T__10:
				break;
			default:
				break;
			}
			State = 357;
			Match(T__10);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166071432080818432L) != 0)) {
				{
				State = 358;
				expression();
				}
			}

			State = 361;
			Match(T__10);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166071432080818432L) != 0)) {
				{
				State = 362;
				expression();
				}
			}

			State = 365;
			Match(T__8);
			State = 366;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(T__30);
			State = 369;
			Match(T__7);
			State = 370;
			expression();
			State = 371;
			Match(T__8);
			State = 372;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(T__31);
			State = 375;
			statement();
			State = 376;
			Match(T__30);
			State = 377;
			Match(T__7);
			State = 378;
			expression();
			State = 379;
			Match(T__8);
			State = 380;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChamadaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ChamadaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chamadaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterChamadaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitChamadaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChamadaStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChamadaStatementContext chamadaStatement() {
		ChamadaStatementContext _localctx = new ChamadaStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_chamadaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(IDENTIFIER);
			State = 383;
			Match(T__7);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166071432080818432L) != 0)) {
				{
				State = 384;
				expression();
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__9) {
					{
					{
					State = 385;
					Match(T__9);
					State = 386;
					expression();
					}
					}
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 394;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(T__32);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166071432080818432L) != 0)) {
				{
				State = 397;
				expression();
				}
			}

			State = 400;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ExprCParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ExprCParser.IDENTIFIER, i);
		}
		public PointerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterPointerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitPointerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerDeclarationContext pointerDeclaration() {
		PointerDeclarationContext _localctx = new PointerDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_pointerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			type();
			State = 403;
			Match(T__14);
			State = 404;
			Match(IDENTIFIER);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 405;
				Match(T__13);
				State = 406;
				Match(T__21);
				State = 407;
				Match(IDENTIFIER);
				}
			}

			State = 410;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression() {
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_ternaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			logicalOrExpression();
			State = 413;
			Match(T__33);
			State = 414;
			statement();
			State = 415;
			Match(T__26);
			State = 416;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExprCParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			type();
			State = 419;
			Match(IDENTIFIER);
			State = 420;
			Match(T__11);
			State = 421;
			Match(CONSTANT);
			State = 422;
			Match(T__12);
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 423;
				Match(T__13);
				State = 424;
				Match(T__16);
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7166071432080818432L) != 0)) {
					{
					State = 425;
					expression();
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__9) {
						{
						{
						State = 426;
						Match(T__9);
						State = 427;
						expression();
						}
						}
						State = 432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 435;
				Match(T__17);
				}
			}

			State = 438;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTANT() { return GetTokens(ExprCParser.CONSTANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT(int i) {
			return GetToken(ExprCParser.CONSTANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext[] arrayInitializer() {
			return GetRuleContexts<ArrayInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer(int i) {
			return GetRuleContext<ArrayInitializerContext>(i);
		}
		public MatrixDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterMatrixDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitMatrixDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixDeclarationContext matrixDeclaration() {
		MatrixDeclarationContext _localctx = new MatrixDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_matrixDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			type();
			State = 441;
			Match(IDENTIFIER);
			State = 442;
			Match(T__11);
			State = 443;
			Match(CONSTANT);
			State = 444;
			Match(T__12);
			State = 445;
			Match(T__11);
			State = 446;
			Match(CONSTANT);
			State = 447;
			Match(T__12);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 448;
				Match(T__13);
				State = 449;
				Match(T__16);
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 450;
					arrayInitializer();
					State = 455;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__9) {
						{
						{
						State = 451;
						Match(T__9);
						State = 452;
						arrayInitializer();
						}
						}
						State = 457;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 460;
				Match(T__17);
				}
			}

			State = 463;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 66, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(T__16);
			State = 466;
			expression();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 467;
				Match(T__9);
				State = 468;
				expression();
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_type);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476;
				Match(T__5);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 3);
				{
				State = 478;
				Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 4);
				{
				State = 479;
				Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 5);
				{
				State = 480;
				Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 6);
				{
				State = 481;
				Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 7);
				{
				State = 482;
				Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 8);
				{
				State = 483;
				Match(T__40);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 9);
				{
				State = 484;
				Match(T__15);
				State = 485;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TernaryExpressionContext ternaryExpression() {
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_expression);
		try {
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489;
				ternaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExprCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_assignmentExpression);
		try {
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 492;
				Match(IDENTIFIER);
				State = 493;
				Match(T__13);
				State = 494;
				logicalOrExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495;
				logicalOrExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			logicalAndExpression();
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__41) {
				{
				{
				State = 499;
				Match(T__41);
				State = 500;
				logicalAndExpression();
				}
				}
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			equalityExpression();
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__42) {
				{
				{
				State = 507;
				Match(T__42);
				State = 508;
				equalityExpression();
				}
				}
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			relationalExpression();
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43 || _la==T__44) {
				{
				{
				State = 515;
				_la = TokenStream.LA(1);
				if ( !(_la==T__43 || _la==T__44) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 516;
				relationalExpression();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			additiveExpression();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533016L) != 0)) {
				{
				{
				State = 523;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533016L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 524;
				additiveExpression();
				}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			multiplicativeExpression();
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47 || _la==T__48) {
				{
				{
				State = 531;
				_la = TokenStream.LA(1);
				if ( !(_la==T__47 || _la==T__48) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 532;
				multiplicativeExpression();
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			unaryExpression();
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699720560640L) != 0)) {
				{
				{
				State = 539;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699720560640L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 540;
				unaryExpression();
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_unaryExpression);
		int _la;
		try {
			State = 549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__55:
			case CONSTANT:
			case IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546;
				primaryExpression();
				}
				break;
			case T__14:
			case T__21:
			case T__47:
			case T__48:
			case T__51:
			case T__52:
			case T__53:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32369622325952512L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 548;
				unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ExprCParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ExprCParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExprCParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ExprCParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExprCListener typedListener = listener as IExprCListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprCVisitor<TResult> typedVisitor = visitor as IExprCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_primaryExpression);
		int _la;
		try {
			State = 579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				Match(T__7);
				State = 552;
				expression();
				State = 553;
				Match(T__8);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555;
				Match(IDENTIFIER);
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__54) {
					{
					{
					State = 556;
					Match(T__54);
					State = 557;
					Match(IDENTIFIER);
					}
					}
					State = 562;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 563;
					Match(T__11);
					State = 564;
					expression();
					State = 565;
					Match(T__12);
					}
					}
					State = 571;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CONSTANT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572;
				Match(CONSTANT);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 573;
				Match(STRING_LITERAL);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 5);
				{
				State = 574;
				Match(T__55);
				State = 575;
				Match(T__7);
				State = 576;
				type();
				State = 577;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,66,582,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,5,0,92,8,0,10,0,12,0,95,9,0,1,0,1,0,5,0,99,8,0,
		10,0,12,0,102,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,129,8,4,1,5,1,5,1,
		5,1,5,3,5,135,8,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,143,8,6,10,6,12,6,146,9,
		6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,155,8,8,10,8,12,8,158,9,8,1,8,1,8,1,
		9,1,9,1,9,1,9,5,9,166,8,9,10,9,12,9,169,9,9,1,9,1,9,3,9,173,8,9,1,9,1,
		9,1,9,1,9,1,9,5,9,180,8,9,10,9,12,9,183,9,9,1,9,1,9,3,9,187,8,9,3,9,189,
		8,9,1,10,1,10,1,10,1,10,5,10,195,8,10,10,10,12,10,198,9,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,3,11,208,8,11,1,11,1,11,1,12,1,12,1,12,1,12,
		5,12,216,8,12,10,12,12,12,219,9,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,3,13,229,8,13,1,13,1,13,1,14,1,14,5,14,235,8,14,10,14,12,14,238,9,
		14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,261,8,15,1,16,1,16,1,16,1,17,
		1,17,1,17,1,17,3,17,270,8,17,1,17,1,17,5,17,274,8,17,10,17,12,17,277,9,
		17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,287,8,18,1,18,5,18,290,
		8,18,10,18,12,18,293,9,18,1,18,1,18,1,18,1,19,1,19,5,19,300,8,19,10,19,
		12,19,303,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,314,8,
		20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,322,8,21,10,21,12,21,325,9,21,1,
		21,3,21,328,8,21,1,21,1,21,1,22,1,22,1,22,1,22,5,22,336,8,22,10,22,12,
		22,339,9,22,1,22,1,22,1,22,1,23,1,23,1,23,5,23,347,8,23,10,23,12,23,350,
		9,23,1,24,1,24,1,24,1,24,3,24,356,8,24,1,24,1,24,3,24,360,8,24,1,24,1,
		24,3,24,364,8,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,388,8,27,10,
		27,12,27,391,9,27,3,27,393,8,27,1,27,1,27,1,28,1,28,3,28,399,8,28,1,28,
		1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,409,8,29,1,29,1,29,1,30,1,30,1,
		30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,
		31,429,8,31,10,31,12,31,432,9,31,3,31,434,8,31,1,31,3,31,437,8,31,1,31,
		1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		5,32,454,8,32,10,32,12,32,457,9,32,3,32,459,8,32,1,32,3,32,462,8,32,1,
		32,1,32,1,33,1,33,1,33,1,33,5,33,470,8,33,10,33,12,33,473,9,33,1,33,1,
		33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,487,8,34,1,35,
		1,35,3,35,491,8,35,1,36,1,36,1,36,1,36,3,36,497,8,36,1,37,1,37,1,37,5,
		37,502,8,37,10,37,12,37,505,9,37,1,38,1,38,1,38,5,38,510,8,38,10,38,12,
		38,513,9,38,1,39,1,39,1,39,5,39,518,8,39,10,39,12,39,521,9,39,1,40,1,40,
		1,40,5,40,526,8,40,10,40,12,40,529,9,40,1,41,1,41,1,41,5,41,534,8,41,10,
		41,12,41,537,9,41,1,42,1,42,1,42,5,42,542,8,42,10,42,12,42,545,9,42,1,
		43,1,43,1,43,3,43,550,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,559,
		8,44,10,44,12,44,562,9,44,1,44,1,44,1,44,1,44,5,44,568,8,44,10,44,12,44,
		571,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,580,8,44,1,44,0,0,45,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,0,5,1,0,44,
		45,2,0,3,4,46,47,1,0,48,49,2,0,15,15,50,51,4,0,15,15,22,22,48,49,52,54,
		621,0,93,1,0,0,0,2,105,1,0,0,0,4,111,1,0,0,0,6,116,1,0,0,0,8,128,1,0,0,
		0,10,130,1,0,0,0,12,139,1,0,0,0,14,147,1,0,0,0,16,150,1,0,0,0,18,188,1,
		0,0,0,20,190,1,0,0,0,22,202,1,0,0,0,24,211,1,0,0,0,26,223,1,0,0,0,28,232,
		1,0,0,0,30,260,1,0,0,0,32,262,1,0,0,0,34,265,1,0,0,0,36,281,1,0,0,0,38,
		297,1,0,0,0,40,306,1,0,0,0,42,315,1,0,0,0,44,331,1,0,0,0,46,343,1,0,0,
		0,48,351,1,0,0,0,50,368,1,0,0,0,52,374,1,0,0,0,54,382,1,0,0,0,56,396,1,
		0,0,0,58,402,1,0,0,0,60,412,1,0,0,0,62,418,1,0,0,0,64,440,1,0,0,0,66,465,
		1,0,0,0,68,486,1,0,0,0,70,490,1,0,0,0,72,496,1,0,0,0,74,498,1,0,0,0,76,
		506,1,0,0,0,78,514,1,0,0,0,80,522,1,0,0,0,82,530,1,0,0,0,84,538,1,0,0,
		0,86,549,1,0,0,0,88,579,1,0,0,0,90,92,3,2,1,0,91,90,1,0,0,0,92,95,1,0,
		0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,100,1,0,0,0,95,93,1,0,0,0,96,99,3,8,
		4,0,97,99,3,10,5,0,98,96,1,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,
		0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,104,3,6,3,0,
		104,1,1,0,0,0,105,106,5,1,0,0,106,107,5,2,0,0,107,108,5,3,0,0,108,109,
		5,63,0,0,109,110,5,4,0,0,110,3,1,0,0,0,111,112,5,1,0,0,112,113,5,5,0,0,
		113,114,5,61,0,0,114,115,5,57,0,0,115,5,1,0,0,0,116,117,5,6,0,0,117,118,
		5,7,0,0,118,119,5,8,0,0,119,120,5,9,0,0,120,121,3,28,14,0,121,7,1,0,0,
		0,122,129,3,16,8,0,123,129,3,30,15,0,124,129,3,20,10,0,125,129,3,24,12,
		0,126,129,3,4,2,0,127,129,3,56,28,0,128,122,1,0,0,0,128,123,1,0,0,0,128,
		124,1,0,0,0,128,125,1,0,0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,9,1,0,
		0,0,130,131,3,68,34,0,131,132,5,61,0,0,132,134,5,8,0,0,133,135,3,12,6,
		0,134,133,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,5,9,0,0,137,
		138,3,28,14,0,138,11,1,0,0,0,139,144,3,14,7,0,140,141,5,10,0,0,141,143,
		3,14,7,0,142,140,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,
		0,145,13,1,0,0,0,146,144,1,0,0,0,147,148,3,68,34,0,148,149,5,61,0,0,149,
		15,1,0,0,0,150,151,3,68,34,0,151,156,3,18,9,0,152,153,5,10,0,0,153,155,
		3,18,9,0,154,152,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,
		0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,11,0,0,160,17,1,0,0,0,161,
		167,5,61,0,0,162,163,5,12,0,0,163,164,5,57,0,0,164,166,5,13,0,0,165,162,
		1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,172,1,0,0,
		0,169,167,1,0,0,0,170,171,5,14,0,0,171,173,3,70,35,0,172,170,1,0,0,0,172,
		173,1,0,0,0,173,189,1,0,0,0,174,175,5,15,0,0,175,181,5,61,0,0,176,177,
		5,12,0,0,177,178,5,57,0,0,178,180,5,13,0,0,179,176,1,0,0,0,180,183,1,0,
		0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,186,1,0,0,0,183,181,1,0,0,0,184,
		185,5,14,0,0,185,187,3,70,35,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,
		1,0,0,0,188,161,1,0,0,0,188,174,1,0,0,0,189,19,1,0,0,0,190,191,5,16,0,
		0,191,192,5,61,0,0,192,196,5,17,0,0,193,195,3,22,11,0,194,193,1,0,0,0,
		195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,196,
		1,0,0,0,199,200,5,18,0,0,200,201,5,11,0,0,201,21,1,0,0,0,202,203,3,68,
		34,0,203,207,5,61,0,0,204,205,5,12,0,0,205,206,5,57,0,0,206,208,5,13,0,
		0,207,204,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,210,5,11,0,0,210,
		23,1,0,0,0,211,212,5,19,0,0,212,213,5,61,0,0,213,217,5,17,0,0,214,216,
		3,26,13,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,
		0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,18,0,0,221,222,5,11,0,0,
		222,25,1,0,0,0,223,224,3,68,34,0,224,228,5,61,0,0,225,226,5,12,0,0,226,
		227,5,57,0,0,227,229,5,13,0,0,228,225,1,0,0,0,228,229,1,0,0,0,229,230,
		1,0,0,0,230,231,5,11,0,0,231,27,1,0,0,0,232,236,5,17,0,0,233,235,3,30,
		15,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
		239,1,0,0,0,238,236,1,0,0,0,239,240,5,18,0,0,240,29,1,0,0,0,241,261,3,
		32,16,0,242,261,3,38,19,0,243,261,3,40,20,0,244,261,3,56,28,0,245,261,
		3,16,8,0,246,261,3,48,24,0,247,261,3,50,25,0,248,261,3,52,26,0,249,261,
		3,42,21,0,250,261,3,36,18,0,251,261,3,34,17,0,252,253,3,54,27,0,253,254,
		5,11,0,0,254,261,1,0,0,0,255,261,3,56,28,0,256,261,3,58,29,0,257,261,3,
		60,30,0,258,261,3,62,31,0,259,261,3,64,32,0,260,241,1,0,0,0,260,242,1,
		0,0,0,260,243,1,0,0,0,260,244,1,0,0,0,260,245,1,0,0,0,260,246,1,0,0,0,
		260,247,1,0,0,0,260,248,1,0,0,0,260,249,1,0,0,0,260,250,1,0,0,0,260,251,
		1,0,0,0,260,252,1,0,0,0,260,255,1,0,0,0,260,256,1,0,0,0,260,257,1,0,0,
		0,260,258,1,0,0,0,260,259,1,0,0,0,261,31,1,0,0,0,262,263,3,70,35,0,263,
		264,5,11,0,0,264,33,1,0,0,0,265,266,5,20,0,0,266,269,5,8,0,0,267,270,3,
		70,35,0,268,270,5,62,0,0,269,267,1,0,0,0,269,268,1,0,0,0,270,275,1,0,0,
		0,271,272,5,10,0,0,272,274,3,70,35,0,273,271,1,0,0,0,274,277,1,0,0,0,275,
		273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,5,
		9,0,0,279,280,5,11,0,0,280,35,1,0,0,0,281,282,5,21,0,0,282,283,5,8,0,0,
		283,291,5,62,0,0,284,286,5,10,0,0,285,287,5,22,0,0,286,285,1,0,0,0,286,
		287,1,0,0,0,287,288,1,0,0,0,288,290,5,61,0,0,289,284,1,0,0,0,290,293,1,
		0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,
		294,295,5,9,0,0,295,296,5,11,0,0,296,37,1,0,0,0,297,301,5,17,0,0,298,300,
		3,30,15,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,
		0,0,302,304,1,0,0,0,303,301,1,0,0,0,304,305,5,18,0,0,305,39,1,0,0,0,306,
		307,5,23,0,0,307,308,5,8,0,0,308,309,3,70,35,0,309,310,5,9,0,0,310,313,
		3,30,15,0,311,312,5,24,0,0,312,314,3,30,15,0,313,311,1,0,0,0,313,314,1,
		0,0,0,314,41,1,0,0,0,315,316,5,25,0,0,316,317,5,8,0,0,317,318,3,70,35,
		0,318,319,5,9,0,0,319,323,5,17,0,0,320,322,3,44,22,0,321,320,1,0,0,0,322,
		325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,0,325,323,1,
		0,0,0,326,328,3,46,23,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,
		0,329,330,5,18,0,0,330,43,1,0,0,0,331,332,5,26,0,0,332,333,5,57,0,0,333,
		337,5,27,0,0,334,336,3,30,15,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,
		1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,5,28,0,
		0,341,342,5,11,0,0,342,45,1,0,0,0,343,344,5,29,0,0,344,348,5,27,0,0,345,
		347,3,30,15,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,
		1,0,0,0,349,47,1,0,0,0,350,348,1,0,0,0,351,352,5,30,0,0,352,355,5,8,0,
		0,353,356,3,16,8,0,354,356,3,70,35,0,355,353,1,0,0,0,355,354,1,0,0,0,355,
		356,1,0,0,0,356,357,1,0,0,0,357,359,5,11,0,0,358,360,3,70,35,0,359,358,
		1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,363,5,11,0,0,362,364,3,70,
		35,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,9,0,0,366,
		367,3,30,15,0,367,49,1,0,0,0,368,369,5,31,0,0,369,370,5,8,0,0,370,371,
		3,70,35,0,371,372,5,9,0,0,372,373,3,30,15,0,373,51,1,0,0,0,374,375,5,32,
		0,0,375,376,3,30,15,0,376,377,5,31,0,0,377,378,5,8,0,0,378,379,3,70,35,
		0,379,380,5,9,0,0,380,381,5,11,0,0,381,53,1,0,0,0,382,383,5,61,0,0,383,
		392,5,8,0,0,384,389,3,70,35,0,385,386,5,10,0,0,386,388,3,70,35,0,387,385,
		1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,393,1,0,0,
		0,391,389,1,0,0,0,392,384,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,
		395,5,9,0,0,395,55,1,0,0,0,396,398,5,33,0,0,397,399,3,70,35,0,398,397,
		1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,11,0,0,401,57,1,0,0,
		0,402,403,3,68,34,0,403,404,5,15,0,0,404,408,5,61,0,0,405,406,5,14,0,0,
		406,407,5,22,0,0,407,409,5,61,0,0,408,405,1,0,0,0,408,409,1,0,0,0,409,
		410,1,0,0,0,410,411,5,11,0,0,411,59,1,0,0,0,412,413,3,74,37,0,413,414,
		5,34,0,0,414,415,3,30,15,0,415,416,5,27,0,0,416,417,3,30,15,0,417,61,1,
		0,0,0,418,419,3,68,34,0,419,420,5,61,0,0,420,421,5,12,0,0,421,422,5,57,
		0,0,422,436,5,13,0,0,423,424,5,14,0,0,424,433,5,17,0,0,425,430,3,70,35,
		0,426,427,5,10,0,0,427,429,3,70,35,0,428,426,1,0,0,0,429,432,1,0,0,0,430,
		428,1,0,0,0,430,431,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,433,425,1,
		0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,437,5,18,0,0,436,423,1,0,0,0,
		436,437,1,0,0,0,437,438,1,0,0,0,438,439,5,11,0,0,439,63,1,0,0,0,440,441,
		3,68,34,0,441,442,5,61,0,0,442,443,5,12,0,0,443,444,5,57,0,0,444,445,5,
		13,0,0,445,446,5,12,0,0,446,447,5,57,0,0,447,461,5,13,0,0,448,449,5,14,
		0,0,449,458,5,17,0,0,450,455,3,66,33,0,451,452,5,10,0,0,452,454,3,66,33,
		0,453,451,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,
		459,1,0,0,0,457,455,1,0,0,0,458,450,1,0,0,0,458,459,1,0,0,0,459,460,1,
		0,0,0,460,462,5,18,0,0,461,448,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,
		463,464,5,11,0,0,464,65,1,0,0,0,465,466,5,17,0,0,466,471,3,70,35,0,467,
		468,5,10,0,0,468,470,3,70,35,0,469,467,1,0,0,0,470,473,1,0,0,0,471,469,
		1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,18,0,
		0,475,67,1,0,0,0,476,487,5,6,0,0,477,487,5,35,0,0,478,487,5,36,0,0,479,
		487,5,37,0,0,480,487,5,38,0,0,481,487,5,39,0,0,482,487,5,40,0,0,483,487,
		5,41,0,0,484,485,5,16,0,0,485,487,5,61,0,0,486,476,1,0,0,0,486,477,1,0,
		0,0,486,478,1,0,0,0,486,479,1,0,0,0,486,480,1,0,0,0,486,481,1,0,0,0,486,
		482,1,0,0,0,486,483,1,0,0,0,486,484,1,0,0,0,487,69,1,0,0,0,488,491,3,72,
		36,0,489,491,3,60,30,0,490,488,1,0,0,0,490,489,1,0,0,0,491,71,1,0,0,0,
		492,493,5,61,0,0,493,494,5,14,0,0,494,497,3,74,37,0,495,497,3,74,37,0,
		496,492,1,0,0,0,496,495,1,0,0,0,497,73,1,0,0,0,498,503,3,76,38,0,499,500,
		5,42,0,0,500,502,3,76,38,0,501,499,1,0,0,0,502,505,1,0,0,0,503,501,1,0,
		0,0,503,504,1,0,0,0,504,75,1,0,0,0,505,503,1,0,0,0,506,511,3,78,39,0,507,
		508,5,43,0,0,508,510,3,78,39,0,509,507,1,0,0,0,510,513,1,0,0,0,511,509,
		1,0,0,0,511,512,1,0,0,0,512,77,1,0,0,0,513,511,1,0,0,0,514,519,3,80,40,
		0,515,516,7,0,0,0,516,518,3,80,40,0,517,515,1,0,0,0,518,521,1,0,0,0,519,
		517,1,0,0,0,519,520,1,0,0,0,520,79,1,0,0,0,521,519,1,0,0,0,522,527,3,82,
		41,0,523,524,7,1,0,0,524,526,3,82,41,0,525,523,1,0,0,0,526,529,1,0,0,0,
		527,525,1,0,0,0,527,528,1,0,0,0,528,81,1,0,0,0,529,527,1,0,0,0,530,535,
		3,84,42,0,531,532,7,2,0,0,532,534,3,84,42,0,533,531,1,0,0,0,534,537,1,
		0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,83,1,0,0,0,537,535,1,0,0,0,538,
		543,3,86,43,0,539,540,7,3,0,0,540,542,3,86,43,0,541,539,1,0,0,0,542,545,
		1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,85,1,0,0,0,545,543,1,0,0,0,
		546,550,3,88,44,0,547,548,7,4,0,0,548,550,3,86,43,0,549,546,1,0,0,0,549,
		547,1,0,0,0,550,87,1,0,0,0,551,552,5,8,0,0,552,553,3,70,35,0,553,554,5,
		9,0,0,554,580,1,0,0,0,555,560,5,61,0,0,556,557,5,55,0,0,557,559,5,61,0,
		0,558,556,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,
		569,1,0,0,0,562,560,1,0,0,0,563,564,5,12,0,0,564,565,3,70,35,0,565,566,
		5,13,0,0,566,568,1,0,0,0,567,563,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,
		0,569,570,1,0,0,0,570,580,1,0,0,0,571,569,1,0,0,0,572,580,5,57,0,0,573,
		580,5,62,0,0,574,575,5,56,0,0,575,576,5,8,0,0,576,577,3,68,34,0,577,578,
		5,9,0,0,578,580,1,0,0,0,579,551,1,0,0,0,579,555,1,0,0,0,579,572,1,0,0,
		0,579,573,1,0,0,0,579,574,1,0,0,0,580,89,1,0,0,0,55,93,98,100,128,134,
		144,156,167,172,181,186,188,196,207,217,228,236,260,269,275,286,291,301,
		313,323,327,337,348,355,359,363,389,392,398,408,430,433,436,455,458,461,
		471,486,490,496,503,511,519,527,535,543,549,560,569,579
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
